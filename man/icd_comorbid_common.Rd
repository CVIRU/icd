% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/comorbid.R
\name{icd_comorbid_common}
\alias{icd_comorbid_common}
\title{Internal function to calculate co-morbidities.}
\usage{
icd_comorbid_common(x, map, visit_name = NULL, icd_name, short_code,
  short_map, return_df = FALSE, comorbid_fun = icd9Comorbid_alt_MatMul, ...)
}
\arguments{
\item{map}{list (or name of a list if character vector of length one is given
as argument) of the comorbidities with each top-level list item containing
a vector of decimal ICD-9 codes. This is in the form of a list, with the
names of the items corresponding to the comorbidities (e.g. 'HTN', or
'diabetes') and the contents of each list item being a character vector of
short-form (no decimal place but ideally zero left-padded) ICD-9 codes. No
default: user should prefer to use the derivative functions, e.g.
\code{icd_comorbid_ahrq}, since these also provide appropriate naming for
the fields, and squashing the hierarchy (see \code{hierarchy} below)}

\item{visit_name}{The name of the column in the data frame which contains the
patient or visit identifier. Typically this is the visit identifier, since
patients come leave and enter hospital with different ICD-9 codes. It is a
character vector of length one. If left empty, or \code{NULL}, then an
attempt is made to guess which field has the ID for the patient encounter
(not a patient ID, although this can of course be specified directly). The
guesses proceed until a single match is made. Data frames may be wide with
many matching fields, so to avoid false positives, anything but a single
match is rejected. If there are no successful guesses, and \code{visit_id}
was not specified, then the first column of the data frame is used.}

\item{icd_name}{The name of the column in the \code{data.frame} which
contains the ICD codes. This is a character vector of length one. If it is
\code{NULL}, \code{icd9} will attempt to guess the column name, looking for
progressively less likely possibilities until it matches a single column.
Failing this, it will take the first column in the data frame. Specifying
the column using this argument avoids the guesswork.}

\item{short_code}{single logical value which determines whether the ICD-9
code provided is in short (\code{TRUE}) or decimal (\code{FALSE}) form.
Where reasonable, this is guessed from the input data.}

\item{short_map}{Same as short, but applied to \code{map} instead of the data
frame of ICD codes, \code{x}. All the codes in a mapping should be of the
same type, i.e. short or decimal.}

\item{comorbid_fun}{function i.e. the function (not character string) to be
called to do the comorbidity calculation}
}
\description{
This common comorbidity calculation code does not depend on ICD type. There
is some type conversion so the map and input codes are all in 'short' format,
fast factor generation, then fast comorbidity assignment. The trick is to
reduce the problem by only looking up comorbidities for codes which actually
appear in the data set.
}
\details{
1. get list of ICD codes in the patient data, e.g. Vermont data has 1825, but
e.g. only 336 which appear in AHRQ map.

2. make the patient data ICD codes a factor (if not already)

3. drop all elements of the comorbidity map which are not in the patient
data, about 336 out of 15000 remain (using AHRQ map as example)

4. drop all patient data where the ICD code is not in the comorbidity map

4a. care here because we need to return blank rows where a patient already
didn't have any comorbidities (from the map).

4b. return either in same order provided (making sure we use 'aggregate' when
calling C++ so there is only one result for each patient when there are
out-of-order patients in the data)

5. call the C++ making sure the map and patient icd codes share the same
factor levels
}
\keyword{internal}
